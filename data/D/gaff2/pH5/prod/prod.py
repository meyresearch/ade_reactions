##########################################################################
# this script was generated by openmm-builder. to customize it further,
# you can save the file to disk and edit it with your favorite editor.
##########################################################################

from __future__ import print_function
from simtk.openmm import app
import simtk.openmm as mm
from simtk import unit
from sys import stdout

prmtop = app.AmberPrmtopFile('../equib/ade_D_ala.prmtop')
inpcrd = app.AmberInpcrdFile('../equib/ade_D_ala.inpcrd')

system = prmtop.createSystem(nonbondedMethod=app.PME, 
    nonbondedCutoff=1.0*unit.nanometers, constraints=app.HBonds, rigidWater=True, 
    ewaldErrorTolerance=0.0005)
integrator = mm.LangevinIntegrator(300*unit.kelvin, 1.0/unit.picoseconds, 
    2.0*unit.femtoseconds)
integrator.setConstraintTolerance(0.00001)
system.addForce(mm.MonteCarloBarostat(1*unit.atmospheres, 300*unit.kelvin, 25))

platform = mm.Platform.getPlatformByName('CUDA')
properties = {'CudaPrecision': 'mixed', 'CudaDeviceIndex': '1'}
simulation = app.Simulation(prmtop.topology, system, integrator, platform, 
    properties)
simulation.loadState('../equib/equilibrated.xml')
simulation.context.setVelocitiesToTemperature(300*unit.kelvin)

total_steps = 500000000
simulation.reporters.append(app.DCDReporter('trajectory002.dcd', 5000))
simulation.reporters.append(app.StateDataReporter('prod002.dat', 50000, step=True,
    time=True, potentialEnergy=True, kineticEnergy=True, totalEnergy=True, 
    temperature=True, volume=True, density=True, progress=True, 
    remainingTime=True, speed=True, totalSteps=total_steps, separator=','))
simulation.reporters.append(app.CheckpointReporter('checkpnt002.chk', 50000))

print('Running Production...')
simulation.step(total_steps)
simulation.saveState('prod002.xml')
print('Done!')
